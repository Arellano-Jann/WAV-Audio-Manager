/*Useful sites: 
Good Code Site - http://rogerchansdigitalworld.blogspot.com/2010/05/how-to-read-wav-format-file-in-c.html
FRead - https://www.cplusplus.com/reference/cstdio/fread/
Read - https://www.cplusplus.com/reference/istream/istream/read/

*/

// PASS CODE

// 11/16
// Processor Abstract Class
class Limiter : public Processor{
      //Algo: Remove components above a certain frequency specified.
      //https://www.reddit.com/r/explainlikeimfive/comments/jm6lm/eli5_how_do_audio_lowpasshighpassetc_filters_work/

      int max = 255;

      processBuffer(unsigned char* buffer, int bufferSize) override{
        float scale = 0;
        cin << "Enter scale here (%): " << scale; // so you have a processBuffer method 
        // and then you have the user input something with validation?
        // instead of passing a parameter to the method. it calls a cin which makes things simple.
        scale = max*scale;
        for (auto &x : buffer){// creates scaled echo vector
          if (x > scale){ 
              x = scale; // it says "remove" so i'm wondering 
          }
      }

}

class Processor{
  virtual void processBuffer(unsigned char* buffer, int bufferSize) = 0;
  // saves processor changes to the buffer/the array
  virtual float (std::string function){ // we could have an overloaded template
    float fl;
    cout << "Enter " << function << " here:" 
    cin >> fl;
  }
}

// Tim

#include <fstream>
wav::readFile(const std::string& filename){

  std::ifstream file;
  file.open(filename, ios::binary);
  if (file.is_open()){
  file >> wav_header.riff_header >>  wav_header.wav_size >> wav_header.fmt_header >> wav_header.fmt_chunk_size >> wav_header.audio_format >> wav_header.fmt_chunk_size;//etc.
  while (!file.eof()) file >> buffer;//apparently wrong
  }

}


/*
char riff_header[4]; // Contains "RIFF"
    int wav_size; // Size of the wav portion of the file, which follows the first 8 bytes. File size - 8
    char wave_header[4]; // Contains "WAVE"

    // Format Header
    char fmt_header[4]; // Contains "fmt " (includes trailing space)
    int fmt_chunk_size; // Should be 16 for PCM
    short audio_format; // Should be 1 for PCM. 3 for IEEE Float
    short num_channels;
    int sample_rate;
    int byte_rate; // Number of bytes per second. sample_rate * num_channels * Bytes Per Sample
    short sample_alignment; // num_channels * Bytes Per Sample
    short bit_depth; // Number of bits per sample

    // Data
    char data_header[4]; // Contains "data"
    int data_bytes; // Number of bytes in data. Number of samples * num_channels * sample byte size

    */


//Zach
    void readFile(const std::string &fileName) {
	if(!fileName.is_open()){
		std::cout << "File " << fileName << " could not be opened" << std::endl;
		throw fileName;
	}
	else {
		std::ifstream myFile(fileName, ios::binary);
		
	}
}